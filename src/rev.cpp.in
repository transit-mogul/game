/* $Id$ */

/**
 * This file is part of Transit Mogul. The source code is licensed under the 
 * GPL v3. See intellectual-property.md for more information.
 */

/** @file rev.cpp Autogenerated file (from rev.cpp.in) with the revision and such of Transit Mogul. */

#include "stdafx.h"
#include "core/bitmath_func.hpp"
#include "rev.h"

#include "safeguards.h"

/**
 * Is this version of Transit Mogul a release version?
 * @return True if it is a release version.
 */
bool IsReleasedVersion()
{
	return HasBit(_transit_mogul_newgrf_version, 19);
}

/**
 * The text version of transit_mogul's revision.
 * This will be either
 * - "<tag>", like "<major>.<minor>.<build>[-RC<rc>]",
 * - "<commitdate>-g<shorthash><modified>" in "master",
 * - "<commitdate>-<branch>-g<shorthash><modified>" in other branches, or
 * - "norev000", if the version is unknown.
 *
 * The major, minor and build are the numbers that describe releases of
 * transit_mogul (like 0.5.3). "-RC" is used to flag release candidates.
 *
 * <modified> shows a "M", if the binary is made from modified source code.
 */
const char _transit_mogul_revision[] = "!!VERSION!!";

/**
 * The text version of transit_mogul's build date.
 * Updating the build date in this file is the safest as it generally gets
 * updated for each revision in contrary to most other files that only see
 * updates when they are actually changed themselves.
 */
const char _transit_mogul_build_date[] = __DATE__ " " __TIME__;

/**
 * The git revision hash of this version.
 */
const char _openttd_revision_hash[] = "!!GITHASH!!";

/**
 * Let us know if current build was modified. This detection
 * works even in the case when revision string is overridden by
 * --revision argument.
 * Value 0 means no modification, 1 is for unknown state
 * (compiling from sources without any version control software)
 * and 2 is for modified revision.
 */
const byte _transit_mogul_revision_modified = !!MODIFIED!!;

/**
 * Indicate whether this is a tagged version.
 * If this is non-0, then _openttd_revision is the name of the tag,
 * and the version is likely a beta, release candidate, or real release.
 */
const byte _openttd_revision_tagged = !!ISTAG!!;

/**
 * The NewGRF revision of OTTD:
 * bits  meaning.
 * 28-31 major version
 * 24-27 minor version
 * 20-23 build
 *    19 1 if it is a release, 0 if it is not.
 *  0-18 used to be the SVN revision, now just last revision before switch to git
 *
 * The 19th bit is there so the development/betas/alpha, etc. leading to a
 * final release will always have a lower version number than the released
 * version, thus making comparisons on specific revisions easy.
 */
const uint32 _transit_mogul_newgrf_version = 1 << 28 | 10 << 24 | 0 << 20 | !!ISSTABLETAG!! << 19 | 28004;
